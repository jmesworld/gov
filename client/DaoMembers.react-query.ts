/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
} from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee, Coin } from '@cosmjs/amino';
import {
  Addr,
  Duration,
  Decimal,
  InstantiateMsg,
  Member,
  ExecuteMsg,
  QueryMsg,
  AdminResponse,
  Threshold,
  ConfigResponse,
  HooksResponse,
  MemberListResponse,
  MemberResponse,
  TotalWeightResponse,
} from './DaoMembers.types';
import { DaoMembersQueryClient, DaoMembersClient } from './DaoMembers.client';
export const daoMembersQueryKeys = {
  contract: [
    {
      contract: 'daoMembers',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...daoMembersQueryKeys.contract[0], address: contractAddress }] as const,
  admin: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...daoMembersQueryKeys.address(contractAddress)[0],
        method: 'admin',
        args,
      },
    ] as const,
  totalWeight: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...daoMembersQueryKeys.address(contractAddress)[0],
        method: 'total_weight',
        args,
      },
    ] as const,
  listMembers: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...daoMembersQueryKeys.address(contractAddress)[0],
        method: 'list_members',
        args,
      },
    ] as const,
  member: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...daoMembersQueryKeys.address(contractAddress)[0],
        method: 'member',
        args,
      },
    ] as const,
  hooks: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...daoMembersQueryKeys.address(contractAddress)[0],
        method: 'hooks',
        args,
      },
    ] as const,
  config: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...daoMembersQueryKeys.address(contractAddress)[0],
        method: 'config',
        args,
      },
    ] as const,
};
export interface DaoMembersReactQuery<TResponse, TData = TResponse> {
  client: DaoMembersQueryClient | undefined;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}
export interface DaoMembersConfigQuery<TData>
  extends DaoMembersReactQuery<ConfigResponse, TData> {}
export function useDaoMembersConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: DaoMembersConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    daoMembersQueryKeys.config(client?.contractAddress),
    () =>
      client ? client.config() : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface DaoMembersHooksQuery<TData>
  extends DaoMembersReactQuery<HooksResponse, TData> {}
export function useDaoMembersHooksQuery<TData = HooksResponse>({
  client,
  options,
}: DaoMembersHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(
    daoMembersQueryKeys.hooks(client?.contractAddress),
    () =>
      client ? client.hooks() : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface DaoMembersMemberQuery<TData>
  extends DaoMembersReactQuery<MemberResponse, TData> {
  args: {
    addr: string;
    atHeight?: number;
  };
}
export function useDaoMembersMemberQuery<TData = MemberResponse>({
  client,
  args,
  options,
}: DaoMembersMemberQuery<TData>) {
  return useQuery<MemberResponse, Error, TData>(
    daoMembersQueryKeys.member(client?.contractAddress, args),
    () =>
      client
        ? client.member({
            addr: args.addr,
            atHeight: args.atHeight,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface DaoMembersListMembersQuery<TData>
  extends DaoMembersReactQuery<MemberListResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoMembersListMembersQuery<TData = MemberListResponse>({
  client,
  args,
  options,
}: DaoMembersListMembersQuery<TData>) {
  return useQuery<MemberListResponse, Error, TData>(
    daoMembersQueryKeys.listMembers(client?.contractAddress, args),
    () =>
      client
        ? client.listMembers({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface DaoMembersTotalWeightQuery<TData>
  extends DaoMembersReactQuery<TotalWeightResponse, TData> {
  args: {
    atHeight?: number;
  };
}
export function useDaoMembersTotalWeightQuery<TData = TotalWeightResponse>({
  client,
  args,
  options,
}: DaoMembersTotalWeightQuery<TData>) {
  return useQuery<TotalWeightResponse, Error, TData>(
    daoMembersQueryKeys.totalWeight(client?.contractAddress, args),
    () =>
      client
        ? client.totalWeight({
            atHeight: args.atHeight,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface DaoMembersAdminQuery<TData>
  extends DaoMembersReactQuery<AdminResponse, TData> {}
export function useDaoMembersAdminQuery<TData = AdminResponse>({
  client,
  options,
}: DaoMembersAdminQuery<TData>) {
  return useQuery<AdminResponse, Error, TData>(
    daoMembersQueryKeys.admin(client?.contractAddress),
    () =>
      client ? client.admin() : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface DaoMembersRemoveHookMutation {
  client: DaoMembersClient;
  msg: {
    addr: string;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoMembersRemoveHookMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, DaoMembersRemoveHookMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, DaoMembersRemoveHookMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.removeHook(msg, fee, memo, funds),
    options,
  );
}
export interface DaoMembersAddHookMutation {
  client: DaoMembersClient;
  msg: {
    addr: string;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoMembersAddHookMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, DaoMembersAddHookMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, DaoMembersAddHookMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.addHook(msg, fee, memo, funds),
    options,
  );
}
export interface DaoMembersUpdateMembersMutation {
  client: DaoMembersClient;
  msg: {
    add: Member[];
    remove: string[];
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoMembersUpdateMembersMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, DaoMembersUpdateMembersMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, DaoMembersUpdateMembersMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateMembers(msg, fee, memo, funds),
    options,
  );
}
export interface DaoMembersUpdateAdminMutation {
  client: DaoMembersClient;
  msg: {
    admin?: string;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoMembersUpdateAdminMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, DaoMembersUpdateAdminMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, DaoMembersUpdateAdminMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateAdmin(msg, fee, memo, funds),
    options,
  );
}
