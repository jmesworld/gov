/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
} from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee } from '@cosmjs/amino';
import {
  Addr,
  Uint128,
  ConfigResponse,
  ExecuteMsg,
  ProposalMsg,
  Feature,
  CosmosMsgForEmpty,
  BankMsg,
  StakingMsg,
  DistributionMsg,
  Binary,
  IbcMsg,
  Timestamp,
  Uint64,
  WasmMsg,
  GovMsg,
  VoteOption,
  CoreSlot,
  Funding,
  Coin,
  Empty,
  IbcTimeout,
  IbcTimeoutBlock,
  Decimal,
  GovernanceCoreSlotsResponse,
  SlotVoteResult,
  InstantiateMsg,
  ProposalPeriod,
  PeriodInfoResponse,
  ProposalType,
  ProposalStatus,
  ProposalResponse,
  ProposalsResponse,
  QueryMsg,
  WinningGrantsResponse,
  WinningGrant,
} from './Governance.types';
import { GovernanceQueryClient, GovernanceClient } from './Governance.client';
export const governanceQueryKeys = {
  contract: [
    {
      contract: 'governance',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...governanceQueryKeys.contract[0], address: contractAddress }] as const,
  config: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...governanceQueryKeys.address(contractAddress)[0],
        method: 'config',
        args,
      },
    ] as const,
  periodInfo: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...governanceQueryKeys.address(contractAddress)[0],
        method: 'period_info',
        args,
      },
    ] as const,
  proposal: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...governanceQueryKeys.address(contractAddress)[0],
        method: 'proposal',
        args,
      },
    ] as const,
  proposals: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...governanceQueryKeys.address(contractAddress)[0],
        method: 'proposals',
        args,
      },
    ] as const,
  coreSlots: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...governanceQueryKeys.address(contractAddress)[0],
        method: 'core_slots',
        args,
      },
    ] as const,
  winningGrants: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>,
  ) =>
    [
      {
        ...governanceQueryKeys.address(contractAddress)[0],
        method: 'winning_grants',
        args,
      },
    ] as const,
};
export interface GovernanceReactQuery<TResponse, TData = TResponse> {
  client: GovernanceQueryClient | undefined;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}
export interface GovernanceWinningGrantsQuery<TData>
  extends GovernanceReactQuery<WinningGrantsResponse, TData> {}
export function useGovernanceWinningGrantsQuery<TData = WinningGrantsResponse>({
  client,
  options,
}: GovernanceWinningGrantsQuery<TData>) {
  return useQuery<WinningGrantsResponse, Error, TData>(
    governanceQueryKeys.winningGrants(client?.contractAddress),
    () =>
      client
        ? client.winningGrants()
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface GovernanceCoreSlotsQuery<TData>
  extends GovernanceReactQuery<CoreSlot, TData> {}
export function useGovernanceCoreSlotsQuery<TData = CoreSlot>({
  client,
  options,
}: GovernanceCoreSlotsQuery<TData>) {
  return useQuery<CoreSlot, Error, TData>(
    governanceQueryKeys.coreSlots(client?.contractAddress),
    () =>
      client ? client.coreSlots() : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface GovernanceProposalsQuery<TData>
  extends GovernanceReactQuery<ProposalsResponse, TData> {
  args: {
    limit?: number;
    start?: number;
  };
}
export function useGovernanceProposalsQuery<TData = ProposalsResponse>({
  client,
  args,
  options,
}: GovernanceProposalsQuery<TData>) {
  return useQuery<ProposalsResponse, Error, TData>(
    governanceQueryKeys.proposals(client?.contractAddress, args),
    () =>
      client
        ? client.proposals({
            limit: args.limit,
            start: args.start,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface GovernanceProposalQuery<TData>
  extends GovernanceReactQuery<ProposalResponse, TData> {
  args: {
    id: number;
  };
}
export function useGovernanceProposalQuery<TData = ProposalResponse>({
  client,
  args,
  options,
}: GovernanceProposalQuery<TData>) {
  return useQuery<ProposalResponse, Error, TData>(
    governanceQueryKeys.proposal(client?.contractAddress, args),
    () =>
      client
        ? client.proposal({
            id: args.id,
          })
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface GovernancePeriodInfoQuery<TData>
  extends GovernanceReactQuery<PeriodInfoResponse, TData> {}
export function useGovernancePeriodInfoQuery<TData = PeriodInfoResponse>({
  client,
  options,
}: GovernancePeriodInfoQuery<TData>) {
  return useQuery<PeriodInfoResponse, Error, TData>(
    governanceQueryKeys.periodInfo(client?.contractAddress),
    () =>
      client
        ? client.periodInfo()
        : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface GovernanceConfigQuery<TData>
  extends GovernanceReactQuery<ConfigResponse, TData> {}
export function useGovernanceConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: GovernanceConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    governanceQueryKeys.config(client?.contractAddress),
    () =>
      client ? client.config() : Promise.reject(new Error('Invalid client')),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    },
  );
}
export interface GovernanceResignCoreSlotMutation {
  client: GovernanceClient;
  msg: {
    note: string;
    slot: CoreSlot;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useGovernanceResignCoreSlotMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, GovernanceResignCoreSlotMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, GovernanceResignCoreSlotMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.resignCoreSlot(msg, fee, memo, funds),
    options,
  );
}
export interface GovernanceUnsetCoreSlotMutation {
  client: GovernanceClient;
  msg: {
    proposalId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useGovernanceUnsetCoreSlotMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, GovernanceUnsetCoreSlotMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, GovernanceUnsetCoreSlotMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.unsetCoreSlot(msg, fee, memo, funds),
    options,
  );
}
export interface GovernanceSetCoreSlotMutation {
  client: GovernanceClient;
  msg: {
    proposalId: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useGovernanceSetCoreSlotMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, GovernanceSetCoreSlotMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, GovernanceSetCoreSlotMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.setCoreSlot(msg, fee, memo, funds),
    options,
  );
}
export interface GovernanceSetContractMutation {
  client: GovernanceClient;
  msg: {
    artDealer: string;
    identityservice: string;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useGovernanceSetContractMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, GovernanceSetContractMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, GovernanceSetContractMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.setContract(msg, fee, memo, funds),
    options,
  );
}
export interface GovernanceConcludeMutation {
  client: GovernanceClient;
  msg: {
    id: number;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useGovernanceConcludeMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, GovernanceConcludeMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, GovernanceConcludeMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.conclude(msg, fee, memo, funds),
    options,
  );
}
export interface GovernanceVoteMutation {
  client: GovernanceClient;
  msg: {
    id: number;
    vote: VoteOption;
  };
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useGovernanceVoteMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, GovernanceVoteMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, GovernanceVoteMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.vote(msg, fee, memo, funds),
    options,
  );
}
export interface GovernanceProposeMutation {
  client: GovernanceClient;
  args?: {
    fee?: number | StdFee | 'auto';
    memo?: string;
    funds?: Coin[];
  };
}
export function useGovernanceProposeMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, GovernanceProposeMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, GovernanceProposeMutation>(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.propose(fee, memo, funds),
    options,
  );
}
