/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Addr, ConfigResponse, ExecuteMsg, Metadata, Trait, InstantiateMsg, QueryMsg } from "./ArtDealer.types";
import { ArtDealerQueryClient, ArtDealerClient } from "./ArtDealer.client";
export const artDealerQueryKeys = {
  contract: ([{
    contract: "artDealer"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...artDealerQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  getConfig: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...artDealerQueryKeys.address(contractAddress)[0],
    method: "get_config",
    args
  }] as const)
};
export interface ArtDealerReactQuery<TResponse, TData = TResponse> {
  client: ArtDealerQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArtDealerGetConfigQuery<TData> extends ArtDealerReactQuery<GetConfigResponse, TData> {}
export function useArtDealerGetConfigQuery<TData = GetConfigResponse>({
  client,
  options
}: ArtDealerGetConfigQuery<TData>) {
  return useQuery<GetConfigResponse, Error, TData>(artDealerQueryKeys.getConfig(client?.contractAddress), () => client ? client.getConfig() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArtDealerRevokeDealerMutation {
  client: ArtDealerClient;
  msg: {
    dao: Addr;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArtDealerRevokeDealerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtDealerRevokeDealerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtDealerRevokeDealerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revokeDealer(msg, fee, memo, funds), options);
}
export interface ArtDealerApproveDealerMutation {
  client: ArtDealerClient;
  msg: {
    approved: number;
    dao: Addr;
    duration: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArtDealerApproveDealerMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtDealerApproveDealerMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtDealerApproveDealerMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approveDealer(msg, fee, memo, funds), options);
}
export interface ArtDealerMintArtMutation {
  client: ArtDealerClient;
  msg: {
    metadata?: Metadata;
    owner: string;
    tokenId: string;
    tokenUri?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArtDealerMintArtMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtDealerMintArtMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtDealerMintArtMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintArt(msg, fee, memo, funds), options);
}