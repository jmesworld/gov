/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Addr = string;
export type Uint128 = string;
export interface ConfigResponse {
  artist_curator_addr?: Addr | null;
  bjmes_token_addr: Addr;
  period_start_epoch: number;
  posting_period_length: number;
  proposal_required_deposit: Uint128;
  proposal_required_percentage: number;
  voting_period_length: number;
  [k: string]: unknown;
}
export type Decimal = string;
export interface CoreSlotsResponse {
  brand?: SlotVoteResult | null;
  core_tech?: SlotVoteResult | null;
  creative?: SlotVoteResult | null;
  biz_tech?: SlotVoteResult | null;  
  [k: string]: unknown;
}
export interface SlotVoteResult {
  dao: Addr;
  proposal_voting_end: number;
  yes_ratio: Decimal;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  propose: ProposalMsg;
} | {
  vote: {
    id: number;
    vote: VoteOption;
    [k: string]: unknown;
  };
} | {
  conclude: {
    id: number;
    [k: string]: unknown;
  };
} | {
  set_contract: {
    artist_curator: string;
    distribution: string;
    identityservice: string;
    [k: string]: unknown;
  };
} | {
  set_core_slot: {
    proposal_id: number;
    [k: string]: unknown;
  };
} | {
  unset_core_slot: {
    proposal_id: number;
    [k: string]: unknown;
  };
} | {
  resign_core_slot: {
    note: string;
    slot: CoreSlot;
    [k: string]: unknown;
  };
};
export type ProposalMsg = {
  text_proposal: {
    description: string;
    title: string;
    [k: string]: unknown;
  };
} | {
  request_feature: {
    description: string;
    feature: Feature;
    title: string;
    [k: string]: unknown;
  };
} | {
  funding: {
    amount: Uint128;
    description: string;
    duration: number;
    title: string;
    [k: string]: unknown;
  };
} | {
  improvement: {
    description: string;
    msgs: CosmosMsgForEmpty[];
    title: string;
    [k: string]: unknown;
  };
} | {
  core_slot: {
    description: string;
    slot: CoreSlot;
    title: string;
    [k: string]: unknown;
  };
} | {
  revoke_core_slot: {
    description: string;
    revoke_slot: RevokeCoreSlot;
    title: string;
    [k: string]: unknown;
  };
};
export type Feature = {
  artist_curator: {
    approved: number;
    duration: number;
    [k: string]: unknown;
  };
};
export type CosmosMsgForEmpty = {
  bank: BankMsg;
} | {
  custom: Empty;
} | {
  staking: StakingMsg;
} | {
  distribution: DistributionMsg;
} | {
  wasm: WasmMsg;
};
export type BankMsg = {
  send: {
    amount: Coin[];
    to_address: string;
    [k: string]: unknown;
  };
} | {
  burn: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export type StakingMsg = {
  delegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  undelegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  redelegate: {
    amount: Coin;
    dst_validator: string;
    src_validator: string;
    [k: string]: unknown;
  };
};
export type DistributionMsg = {
  set_withdraw_address: {
    address: string;
    [k: string]: unknown;
  };
} | {
  withdraw_delegator_reward: {
    validator: string;
    [k: string]: unknown;
  };
};
export type WasmMsg = {
  execute: {
    contract_addr: string;
    funds: Coin[];
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  migrate: {
    contract_addr: string;
    msg: Binary;
    new_code_id: number;
    [k: string]: unknown;
  };
} | {
  update_admin: {
    admin: string;
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  clear_admin: {
    contract_addr: string;
    [k: string]: unknown;
  };
};
export type Binary = string;
export type CoreSlot = {
  brand: {
    [k: string]: unknown;
  };
} | {
  creative: {
    [k: string]: unknown;
  };
} | {
  core_tech: {
    [k: string]: unknown;
  };
} | {
  biz_tech: {
    [k: string]: unknown;
  };  
};

export type VoteOption = "yes" | "no";
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export interface RevokeCoreSlot {
  dao: string;
  slot: CoreSlot;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  artist_curator_addr?: string | null;
  bjmes_token_addr: string;
  owner: string;
  period_start_epoch: number;
  posting_period_length: number;
  proposal_required_deposit: Uint128;
  proposal_required_percentage: number;
  voting_period_length: number;
  [k: string]: unknown;
}
export type ProposalPeriod = "posting" | "voting";
export interface PeriodInfoResponse {
  current_block: number;
  current_period: ProposalPeriod;
  current_posting_start: number;
  current_time_in_cycle: number;
  current_voting_end: number;
  current_voting_start: number;
  cycle_length: number;
  next_posting_start: number;
  next_voting_start: number;
  posting_period_length: number;
  voting_period_length: number;
  [k: string]: unknown;
}
export type ProposalType = {
  text: {
    [k: string]: unknown;
  };
} | {
  feature_request: Feature;
} | {
  funding: {
    [k: string]: unknown;
  };
} | {
  improvement: {
    [k: string]: unknown;
  };
} | {
  core_slot: CoreSlot;
} | {
  revoke_core_slot: RevokeCoreSlot;
};
export type ProposalStatus = "posted" | "voting" | "success" | "expired" | "success_concluded" | "expired_concluded";
export interface ProposalResponse {
  coins_no: Uint128;
  coins_yes: Uint128;
  concluded: boolean;
  dao: Addr;
  deposit_amount: Uint128;
  description: string;
  id: number;
  no_voters: Addr[];
  posting_start: number;
  prop_type: ProposalType;
  start_block: number;
  status: ProposalStatus;
  title: string;
  voting_end: number;
  voting_start: number;
  yes_voters: Addr[];
  [k: string]: unknown;
}
export interface ProposalsResponse {
  proposal_count: number;
  proposals: ProposalResponse[];
  [k: string]: unknown;
}
export type QueryMsg = {
  config: {
    [k: string]: unknown;
  };
} | {
  period_info: {
    [k: string]: unknown;
  };
} | {
  proposal: {
    id: number;
    [k: string]: unknown;
  };
} | {
  proposals: {
    limit?: number | null;
    start?: number | null;
    [k: string]: unknown;
  };
} | {
  core_slots: {
    [k: string]: unknown;
  };
};